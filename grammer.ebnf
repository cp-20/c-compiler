program        = global_decl*
global_decl    = type ident "(" type ident ("," type ident)* ")" "{" stmt* "}"
               | struct_decl ";"
               | type ident ";"
               | enum_decl ";"
               | "typedef" (type | enum_decl) ident ";"
stmt           = expr ";"
               | "{" stmt* "}"
               | "if" "(" expr ")" stmt ("else" stmt)?
               | "while" "(" expr ")" stmt
               | "for" "(" expr? ";" expr? ";" expr? ")" stmt
               | "return" expr ";"
expr           = local_decl
local_decl     = type ident ("=" logical)? ("," ident ("=" logical)? )*
               | type ident "[" num "]" ("=" "{" (logical ("," logical)*)? "}")?
               | type ident "[" "]" ("=" "{" (logical ("," logical)*)? "}")?
               | struct_decl ("=" "{" (logical ("," logical)*)? "}")?
logical        = assign ("&&" assign | "||" assign)*
assign         = equality ("=" assign)?
equality       = relational ("==" relational | "!=" relational)*
relational     = add ("<" add | "<=" add | ">" add | ">=" add)*
add            = mul ("+" mul | "-" mul)*
mul            = unary ("*" unary | "/" unary)*
unary          = "sizeof" (unary | type)
               | ("+" | "-")? primary
               | "!" primary
               | "++" primary
               | "--" primary
               | primary "++"
               | primary "--"
               | "&"* primary
               | "*"* primary
primary        = num
               | string
               | "(" expr ")" primary_access*
               | "(" type ")" primary
               | ident ("(" ident ("," ident)* ")")? primary_access*
primary_access = "[" logical "]"
               | "." ident
               | "->" ident 
struct_decl    = "struct" ident "{" (type ident ";")* "}"
enum_decl      = "enum" "{" ( ident "," )* "}" ";"
struct_type    = "struct" (ident | ident? "{" (type ident ";")* "}")
type           = ("int" | struct_type) "*"*
